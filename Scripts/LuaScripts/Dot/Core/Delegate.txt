require("Dot/Core/Class")

Delegate =
    Class(
    function(self)
        self.receivers = {}
        self.funcs = {}
    end
)

Delegate.__sub = function(self, delegate)
    if type(delegate) ~= "table" then
        error("argument is not a table")
    end

    if #(delegate) ~= 2 then
        error("the length is not 2")
    end

    for i = #(self.receivers), 1, -1 do
        if self.receivers[i] == delegate[1] and self.funcs[i] == delegate[2] then
            table.remove(self.receivers, i)
            table.remove(self, i)
            return self
        end
    end

    return self
end

Delegate.__add = function(self, delegate)
    if type(delegate) ~= "table" then
        error("argument is not a table")
    end

    if #(delegate) ~= 2 then
        error("the length is not 2")
    end

    table.insert(self.receivers, delegate[1])
    table.insert(self.funcs, delegate[2])

    return self
end

function Delegate:Invoke(...)
    for i, v in ipairs(self.receivers) do
        self.funcs[i](v, ...)
    end
end
