require("Dot/Event/EventDispatcher")
require("Dot/System/AppEnv")
require("Dot/Config/ConfigManager")
require("Dot/Core/Delegate")

Dot = {}
Dot.__index = Dot

function Dot:DoInit()
    if self.isInit then
        return
    end

    self.isInit = true

    self.DebugLog = require("Dot/Log/DebugLog")
    self.Json = require("rapidjson")
    self.GEventDispatcher = EventDispatcher()
    self.AppEnv = AppEnv(Dot.GEventDispatcher)
    self.ConfigMgr = ConfigManager()

    self.DoStartEvent = Delegate()
    self.DoUpdateEvent = Delegate()

    self:DoModeChanged()
    self.GEventDispatcher:Register(EventID.ModeChanged, EventData(self, Dot.DoModeChanged, false))
end

----private----
--开始启动
function Dot:DoStart()
    self.DoStartEvent:Invoke()
    self.DoStartEvent = nil
end

----private----
--响应Update事件
function Dot:DoUpdate(deltaTime)
    self.DoUpdateEvent:Invoke(deltaTime)
end

----private----
--响应销毁事件，由C#传递到Lua
function Dot:DoDestroy()
    self.GEventDispatcher:Clear()
    self.GEventDispatcher = nil
    self.Json = nil
    self.AppEnv = nil
    self.DebugLog = nil
end

----private----
--用于侦听运行时Mode改变后修改日志的输出
function Dot:DoModeChanged()
    if self.AppEnv:IsDebug() then
        self.DebugLog:SetEnable(true, true, true)
    else
        self.DebugLog:SetEnable(true, false, false)
    end
end
