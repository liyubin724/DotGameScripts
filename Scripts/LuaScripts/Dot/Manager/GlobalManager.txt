require("Dot/Manager/BaseManager")

GMgrName =
{
    GEvent = "GlobalEvent",
}

GlobalManager =
    Class(
    function(self)
        self.items = {}
        self:OnInit()
    end
)

----private----
function GlobalManager:OnInit()
    self:AddManager(GMgrName.GEvent, EventDispatcher())

    self:AddListener()
end

----private----
function GlobalManager:AddListener()
    local gEvent = self:GetManager(GMgrName.GEvent)
    gEvent:Register(EventID.AppStart, EventData(self,GlobalManager.DoAppStart))
    gEvent:Register(EventID.AppUpdate, EventData(self,GlobalManager.DoAppUpdate))
    gEvent:Register(EventID.AppDestroy, EventData(self,GlobalManager.DoAppDestroy))
end

----private----
function GlobalManager:RemoveListener()
    local gEvent = self:GetManager(GMgrName.GEvent)
    gEvent:Unregister(EventID.AppStart, EventData(self,GlobalManager.DoAppStart))
    gEvent:Unregister(EventID.AppUpdate, EventData(self,GlobalManager.DoAppUpdate))
    gEvent:Unregister(EventID.AppDestroy, EventData(self,GlobalManager.DoAppDestroy))
end

----private----
function GlobalManager:DoAppStart()
    --print("GlobalManager::DoAppStart->Start")
end

----private----
function GlobalManager:DoAppUpdate(deltaTime)
    --print("GlobalManager::DoAppUpdate->Update.time = "..tostring(deltaTime))
end

----private----
function GlobalManager:DoAppDestroy()

    print("GlobalManager::DoDestroy->Start")

    self.RemoveListener()

    self.RemoveAll(true)
end

----public----
--
--@param name:
--@param mgr:
function GlobalManager:AddManager(name, mgr)
    if not name or type(name) ~= "string" then
        Logger.LogError("DotGlobal::AddGlobal->name is not string")
        return
    end
    if not mgr or type(mgr) ~= "table" then
        Logger.LogError("DotGlobal::AddGlobal->target is not table")
        return
    end
    if self.items[name] then
        Logger.LogError("DotGlobal::AddGlobal->the name has been add")
        return
    end

    self.items[name] = mgr

    return mgr
end

----public----
--
--@param name:
--@param isDestroy:
function GlobalManager:RemoveManager(name, isDestroy)
    isDestroy = isDestroy or true

    if not name or type(name) ~= "string" then
        Logger.LogError("DotGlobal::AddGlobal->name is not string")
        return
    end

    local mgr = self.items[name]
    if mgr then
        if isDestroy then
            mgr:DoDestroy()
        end
        self.items[name] = nil
    end
end

----public----
--
--@param name
--@return
function GlobalManager:GetManager(name)
    return self.items[name]
end

----public----
--
--@param isDestroy
function GlobalManager:RemoveAll(isDestroy)
    isDestroy = isDestroy or true
    if isDestroy then
        for _, mgr in pairs(self.items) do
            mgr:DoDestroy()
        end
    end
    self.items = {}
end
